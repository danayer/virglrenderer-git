name: Update virglrenderer spec file

on:
  schedule:
    - cron: '0 * * * *'  # Run every hour
  workflow_dispatch:  # Allow manual triggering

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Check for changes in mesa-git
        id: check-mesa
        run: |
          # Get the latest commit hash from mesa-git
          LATEST_MESA_COMMIT=$(curl -s "https://api.github.com/repos/danayer/mesa-git/commits/main" | jq -r .sha)
          echo "Latest mesa-git commit: $LATEST_MESA_COMMIT"
          
          # Create tracking directory if it doesn't exist
          mkdir -p .github/tracking
          
          # Check if tracking file exists
          TRACKING_FILE=".github/tracking/last_mesa_commit"
          if [ ! -f "$TRACKING_FILE" ]; then
            echo "First run, creating tracking file"
            mkdir -p $(dirname "$TRACKING_FILE")
            echo "$LATEST_MESA_COMMIT" > "$TRACKING_FILE"
            git add "$TRACKING_FILE"
            git commit -m "Initialize mesa-git commit tracking"
            git push
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LAST_MESA_COMMIT=$(cat "$TRACKING_FILE")
          echo "Previous mesa-git commit: $LAST_MESA_COMMIT"
          
          if [ "$LATEST_MESA_COMMIT" != "$LAST_MESA_COMMIT" ]; then
            echo "Changes detected in mesa-git"
            echo "$LATEST_MESA_COMMIT" > "$TRACKING_FILE"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes in mesa-git"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update virglrenderer spec file
        if: steps.check-mesa.outputs.changed == 'true'
        run: |
          # Use correct URL-encoded path for virglrenderer project
          echo "Fetching latest virglrenderer commit..."
          
          # Try to get the latest commit from the repository
          LATEST_VIRGL_COMMIT=$(curl -s "https://gitlab.freedesktop.org/api/v4/projects/virgl%2Fvirglrenderer/repository/commits" | jq -r '.[0].id')
          
          # Check if we got a valid commit hash
          if [[ ! "$LATEST_VIRGL_COMMIT" =~ ^[0-9a-f]{40}$ ]]; then
            echo "Failed to get a valid commit hash from API. Response was: $LATEST_VIRGL_COMMIT"
            echo "Checking repository directly..."
            
            # Try alternative approach - get from the web page
            LATEST_VIRGL_COMMIT=$(curl -s "https://gitlab.freedesktop.org/virgl/virglrenderer/-/commits/master" | grep -o 'data-commit-id="[0-9a-f]\{40\}"' | head -1 | cut -d'"' -f2)
            
            if [[ ! "$LATEST_VIRGL_COMMIT" =~ ^[0-9a-f]{40}$ ]]; then
              echo "Still unable to get a valid commit hash. Using 'master' as fallback."
              LATEST_VIRGL_COMMIT="master"
              VIRGL_SHORT_COMMIT="master"
            else
              echo "Successfully retrieved commit hash from web page."
              VIRGL_SHORT_COMMIT=${LATEST_VIRGL_COMMIT:0:7}
            fi
          else
            echo "Successfully retrieved commit hash from API."
            VIRGL_SHORT_COMMIT=${LATEST_VIRGL_COMMIT:0:7}
          fi
          
          echo "Latest virglrenderer commit: $LATEST_VIRGL_COMMIT"
          echo "Short commit: $VIRGL_SHORT_COMMIT"
          
          # Always use the reliable master branch URL
          MASTER_URL="https://gitlab.freedesktop.org/virgl/virglrenderer/-/archive/master/virglrenderer-master.tar.gz"
          
          # Use relative path to the spec file
          SPEC_FILE="virglrenderer.spec"
          
          # Read current version from spec file
          CURRENT_VERSION=$(grep -oP '^Version:\s*\K[0-9.]+' "$SPEC_FILE")
          echo "Current version: $CURRENT_VERSION"
          
          # Parse the version and increment the last part
          BASE_VERSION=$(echo $CURRENT_VERSION | grep -oP '^[0-9]+\.[0-9]+\.')
          LAST_PART=$(echo $CURRENT_VERSION | grep -oP '[0-9]+$')
          NEW_LAST_PART=$((LAST_PART + 1))
          NEW_VERSION="${BASE_VERSION}${NEW_LAST_PART}"
          
          echo "New version: $NEW_VERSION"
          
          # Create temp file for the modified spec
          TMP_FILE=$(mktemp)
          
          # Add global commit variables at the top of the file
          echo "%global commit $LATEST_VIRGL_COMMIT" > "$TMP_FILE"
          echo "%global shortcommit $VIRGL_SHORT_COMMIT" >> "$TMP_FILE"
          echo "" >> "$TMP_FILE"
          
          # Add the rest of the spec file content, skipping any existing global commit lines
          grep -v "^%global commit" "$SPEC_FILE" | grep -v "^%global shortcommit" >> "$TMP_FILE"
          
          # Update Version and Release lines
          sed -i "s/^Version:.*$/Version:\t$NEW_VERSION/" "$TMP_FILE"
          sed -i "s|^Release:.*$|Release:\t1.git%{shortcommit}%{?dist}|" "$TMP_FILE"
          

          
          # Add new changelog entry
          TODAY=$(date '+%a %b %d %Y')
          CHANGELOG_ENTRY="* $TODAY GitHub Actions Bot <actions@github.com> - $NEW_VERSION-1.git$VIRGL_SHORT_COMMIT\n- Automated update based on changes in mesa-git\n- Using latest virglrenderer commit $LATEST_VIRGL_COMMIT"
          sed -i "/^%changelog/a $CHANGELOG_ENTRY" "$TMP_FILE"
          
          # Replace the original file
          cat "$TMP_FILE" > "$SPEC_FILE"
          rm "$TMP_FILE"
      
      - name: Commit and push changes
        if: steps.check-mesa.outputs.changed == 'true'
        run: |
          git add "virglrenderer.spec" .github/tracking/last_mesa_commit
          git commit -m "Update virglrenderer to latest commit based on mesa-git changes"
          git push
